# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-25 14:03+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: vipsbpig <vipsbpig@gmail.com>\n"
"X-Generator: Poedit 1.8.3\n"

#: ../../tutorials/making_plugins.rst:4
msgid "Making Plugins"
msgstr "制作插件"

#: ../../tutorials/making_plugins.rst:8
msgid "*Important:* This tutorial applies only to the upcoming version 2.1."
msgstr "*重要:* 本教程仅适用于即将发布的版本 2.1。"

#: ../../tutorials/making_plugins.rst:12
msgid "About Plugins"
msgstr "关于插件"

#: ../../tutorials/making_plugins.rst:14
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading "
"the editor. Unlike modules, you don't need to create C++ code nor "
"recompile the engine. While this makes plugins not as powerful, there's "
"still a lot of things you can do with them. Note that a plugin is not "
"different from any scene you already can make, except that it is made via "
"script to add functionality."
msgstr ""
"插件是指用来扩展编辑器的功能，让其更加高效有用的工具。它通过标准的场景和 "
"GDScript 即可完成，而不用甚至重新加载编辑器。与模块不同，您不需要创建 c + "
"+ 代码或重新编译引擎。尽管这样子的插件没有那么功能强大，但是不还是能实现很"
"多功能。请注意，插件不同于任何您已经做过的场景，只是它同样由通过脚本来添加"
"功能。"

#: ../../tutorials/making_plugins.rst:21
msgid ""
"This tutorial will guide you through the creation of two simple plugins "
"so you can understand how they work and be able to develop your own. The "
"first will be a custom node that you can add to any scene in the project "
"and the other will be a custom dock added to the editor."
msgstr ""
"本教程将指导您通过创建两个简单的插件以便您可以了解如何工作，如何成为能够开"
"发你自己的插件。第一个插件是您可以向任何场景或项目中添加一个自定义节点，第"
"二个插件是无论任何人都可以将其添加到编辑器的自定义面板。"

#: ../../tutorials/making_plugins.rst:27
msgid "Creating a plugin"
msgstr "插件开发"

#: ../../tutorials/making_plugins.rst:29
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as base to develop and test the plugins."
msgstr ""
"在开始之前，在任意目录创建一个新的空项目。以这作为标准目录进行开发和测试插"
"件的。"

#: ../../tutorials/making_plugins.rst:32
msgid ""
"The first thing you need to do is to create a new plugin that the editor "
"can understand as such. For that you need two files: ``plugin.cfg`` for "
"the configuration and a custom GDScript with the functionality."
msgstr ""
"你需要做的第一件事是创建一个新的编辑器可以执行的插件。为此，您需要两个文"
"件: ``plugin.cfg`` 的配置和自定义的带插件功能的 ``GDScript``  。"

#: ../../tutorials/making_plugins.rst:36
msgid ""
"Plugins have a standard path like ``addons/plugin_name`` inside the "
"project folder. So create the folder ``my_custom_node`` inside "
"``addons``. So you'll have a directory structure like this:"
msgstr ""
"插件已经有 ``addons/plugin_name`` 的标准路径在项目文件夹内。所以创建一个 "
"``my_custom_node`` 文件夹。所以您会有这样的目录结构︰"

#: ../../tutorials/making_plugins.rst:42
msgid ""
"To make the ``plugin.cfg`` file, open your favorite text editor with a "
"blank file. Godot is not able (yet) to open text files besides scripts, "
"so this must be done in an external editor. Add the following structure "
"to your ``plugin.cfg``::"
msgstr ""
"用您喜爱的文本编辑器打开一个空白文件，保存成 ``plugin.cfg`` 文件。Godot还"
"不能打开除了GD脚本以外的文本文件，所以这是必须要在编辑器外做好文件的创建。"
"向你的 ``plugin.cfg`` 添加以下结构︰"

#: ../../tutorials/making_plugins.rst:55
msgid ""
"This is a simple ``ini`` file with metadata about your plugin. You need "
"to set up the name and description so users can understand what it does. "
"Add your own name so you can be properly credited. A version number is "
"useful so users can see if they have an outdated version (if you are "
"unsure on how to come up with the version number, check `SemVer <http://"
"semver.org/>`_). And finally a main script file to load when your plugin "
"is active."
msgstr ""
"这是有关插件的元数据的简单的 ``ini`` 文件例子。您需要设置的名称和说明，以"
"便用户能理解是什么用途的。添加您自己的名称，以便确保归功于您的头上。版本号"
"是很有用的，用户可以知道他们是否有过时的版本 (如果您不确定如何定义版本号，"
"请检阅读 `SemVer <http://semver.org/>`_) 。最后一步设置当插件激活的时候，"
"用来加载你的插件主脚本文件。"

#: ../../tutorials/making_plugins.rst:63
msgid "The script file"
msgstr "脚本文件"

#: ../../tutorials/making_plugins.rst:65
msgid ""
"Open the script editor (F3) and create a new GDScript file called "
"``custom_node.gd`` inside the ``my_custom_node`` folder. This script is "
"special and it has two requirements: it must be a ``tool`` script and it "
"has to inherit from :ref:`class_EditorPlugin`."
msgstr ""
"打开脚本编辑器 (F3) 并创建一个新的 GDScript 文件， 在 ``my_custom_node`` "
"文件夹保存为 ``custom_node.gd`` 。此脚本是特别的，它有两个要求︰ 它必须是 "
"``工具(tool)`` 脚本，它不得不从 :ref:`class_EditorPlugin` 继承。"

#: ../../tutorials/making_plugins.rst:70
msgid ""
"It's important to deal with initialization and clean-up of resources. So "
"a good practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node__exit_tree>` to clean it up. You can delete the "
"default GDScript template from your file and replace it with the "
"following structure:"
msgstr ""
"关键的是初始化和清理资源。所以一个好的做法是使用虚函数 :ref:"
"`_enter_tree() <class_Node__enter_tree>` 初始化您的插件和  :ref:"
"`_exit_tree() <class_Node__exit_tree>` 把它清理干净。您可以从您的文件中删"
"除默认的 GDScript 模板并将替换以下结构︰"

#: ../../tutorials/making_plugins.rst:91
msgid "This is a good template to use when devising new plugins."
msgstr "这是制订新的插件时可用的模板。"

#: ../../tutorials/making_plugins.rst:94
msgid "A custom node"
msgstr "自定义节点"

#: ../../tutorials/making_plugins.rst:96
msgid ""
"Sometimes you want a certain behavior in many nodes. Maybe a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases "
"but sometimes it can be cumbersome, especially if you're using it between "
"many projects. A good solution to this is to make a plugin that adds a "
"node with a custom behavior."
msgstr ""
"有时您希望有特定的行为定制节点时。有可能是一个自定义的，可重复使用的控件或"
"场景。实例化是在很多情况下很有帮助，但有时它可能显得有点麻烦，特别是当您把"
"它用在很多项目。好的解决方案就是编写一个自定义行为的节点插件。"

#: ../../tutorials/making_plugins.rst:102
msgid ""
"To create a new node type, you can avail of the function :ref:"
"`add_custom_type() <class_EditorPlugin_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the "
"editor, be it nodes or resources. But before you can create the type you "
"need a script that will act as the logic for the type. While such script "
"doesn't need to have the ``tool`` keyword, it is interesting to use it so "
"the user can see it acting on the editor."
msgstr ""
"若要创建一个新的节点类型，你可以从 :ref:`class_EditorPlugin` 类实现以下函"
"数 :ref:`add_custom_type() <class_EditorPlugin_add_custom_type>`  。此函数"
"可以向编辑器添加新的节点类型，无论是节点或资源。您只需要一个作为该节点类型"
"的逻辑功能的脚本。虽然这样脚本并不一定非得需要 ``tool`` 关键字，但是这样用"
"户就有兴致看到它在编辑器运行起来了。"

#: ../../tutorials/making_plugins.rst:110
msgid ""
"For this tutorial, we'll create a simple button that prints a message "
"when clicked. And for that we'll need a simple script that extends from :"
"ref:`class_Button`. It could also extend :ref:`class_BaseButton` if you "
"prefer::"
msgstr ""
"在本教程中，我们将创建一个简单的按钮，单击时打印一条消息。为此我们会创建一"
"个简单的脚本，从 :ref:`class_Button` 继承出来。如果你喜欢还可以从 :ref:"
"`class_BaseButton` 继承︰"

#: ../../tutorials/making_plugins.rst:124
msgid ""
"That's it for our basic button. You can save this as ``button.gd`` inside "
"the plugin folder. You'll also need a 16x16 icon to show in the scene "
"tree. If you don't have one, you can grab the default one from the engine:"
msgstr ""
"这就是我们基本的按钮。您可以在插件文件夹里将它保存为'button.gd'。您还需要"
"一个 16 x 16 图标，用来显示在场景树中。如果您还没有，您可以从引擎找一张默"
"认图片︰"

#: ../../tutorials/making_plugins.rst:130
msgid ""
"Now we need to add it as a custom type so it shows on the Create New Node "
"dialog. For that, change the ``custom_node.gd`` script to the following::"
msgstr ""
"现在我们需要将其添加为自定义类型，以便于它显示在创建新节点对话框上。为此，"
"将 ``custom_node.gd`` 脚本更改如下︰"

#: ../../tutorials/making_plugins.rst:146
msgid ""
"With that done, the plugin should already be available in the plugin list "
"at Project Settings. So activate it and try to add a new node to see the "
"result:"
msgstr ""
"这样做完以后，这个插件应该已经显示在项目设置的插件列表中。所以激活它，然后"
"尝试添加一个新的节点看看效果︰"

#: ../../tutorials/making_plugins.rst:151
msgid ""
"When you add the node, you can see that it already have the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see a text in the console:"
msgstr ""
"当您添加节点时，您可以看到，它已经附加上了您创建的脚本。设置文本到该按钮，"
"保存并运行该场景。当您单击该按钮时，您可以看到在控制台中的文本︰"

#: ../../tutorials/making_plugins.rst:159
msgid "A custom dock"
msgstr "自定义面板"

#: ../../tutorials/making_plugins.rst:161
msgid ""
"Maybe you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on control, so how to create them is not far beyond "
"your knowledge."
msgstr ""
"也许你需要用新工具来扩展编辑器现有功能。一个简单的方案就是用插件添加新的面"
"板。面板是基于control的场景，所以如何创建面板并没有超出您之前学会的内容。"

#: ../../tutorials/making_plugins.rst:165
msgid ""
"The way to start this plugin is similar to the custom node. So create a "
"new ``plugin.cfg`` file in the ``addons/my_custom_dock`` folder. And then "
"with your favorite text editor add the following content to it::"
msgstr ""
"编写这个插件的方法类似于编写自定义节点。所以在 ``addons/my_custom_dock`` "
"文件夹中创建一个新的 ``plugin.cfg`` 文件。然后用您喜爱的文本编辑器向它添加"
"以下内容︰"

#: ../../tutorials/making_plugins.rst:177
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` "
"to get a good start."
msgstr ""
"然后在相同的文件夹中创建名为 ``custom_dock.gd`` 的脚本。拷贝 :ref:`我们之"
"前用过的模板<doc_making_plugins_template_code>` 来开始编写。"

#: ../../tutorials/making_plugins.rst:181
msgid ""
"Since we're trying to add a new custom dock, we need to create the "
"contents of such dock. This is nothing more than a standard Godot scene. "
"So you can create a new scene in the editor and start creating it."
msgstr ""
"因为我们要添加一个新的自定义面板，我们需要创建这个面板的内容。这只不过是一"
"个标准的Godot场景。所以您可以在编辑器中创建一个新的场景来开始编写。"

#: ../../tutorials/making_plugins.rst:185
msgid ""
"For an editor dock, it is mandatory that the root of the scene is a :ref:"
"`Control <class_Control>` or one of its child classes. For this tutorial, "
"you can make a single button. The name of the root node will also be the "
"name that appears on the dock tab, so be sure to put a descriptive but "
"short one. Don't forget to add a text to your button."
msgstr ""
"作为编辑器的面板，它的场景的根节点必须是 :ref:`Control <class_Control>`  "
"或其子类之一。对于本教程，你可以使一个单一的按钮。根节点的名称会是在面板选"
"项卡显示的名称，所以一定起个精简清楚的名称。别忘了向您的按钮添加文本。"

#: ../../tutorials/making_plugins.rst:193
msgid "Save this scene as ``my_dock.tscn``."
msgstr "将这一场景另存为 ``my_dock.tscn`` 。"

#: ../../tutorials/making_plugins.rst:195
msgid ""
"Now you need to grab that scene you just created and add it as a dock in "
"the editor. For this you can rely on the function :ref:"
"`add_control_to_dock() <class_EditorPlugin_add_control_to_dock>` from "
"the :ref:`EditorPlugin <class_EditorPlugin>` class."
msgstr ""
"现在你需要把创建好的场景拖到编辑器上添加作为面板。为此，你可以用 :ref:"
"`EditorPlugin <class_EditorPlugin>` 类下的 :ref:`add_control_to_dock() "
"<class_EditorPlugin_add_control_to_dock>` 函数。"

#: ../../tutorials/making_plugins.rst:200
msgid ""
"The code is very straightforward, you just need to select a dock position "
"to add it and have a control to add (which is the scene you just "
"created). It is also very important that you remember to **remove the "
"dock** when the plugin is deactivated. The code can be like this::"
msgstr ""
"代码是非常简单直接的，你只需要选择停靠位置，将它 （就是您刚刚创建的场景）"
"添加到上面。有一点非常重要的你要记住停用该插件需要 **删除面板** 时。可以用"
"如下的代码︰"

#: ../../tutorials/making_plugins.rst:225
msgid ""
"While the dock position is chosen when adding it, the user is free to "
"move it and save the layout with the dock in any position."
msgstr ""
"虽然添加它时写死了停靠位置选择，但是用户仍然可以自由地移动面板到任何位置，"
"并保存在自定义布局。"

#: ../../tutorials/making_plugins.rst:229
msgid "Checking the results"
msgstr "检查结果"

#: ../../tutorials/making_plugins.rst:231
msgid ""
"Now it is the moment to check the results of your work. Open the *Project "
"Settings* and click on the *Plugins* tab. Your plugin should be the only "
"on the list. If it is not showing, click on the *Update* button at the "
"top right corner."
msgstr ""
"现在是时候来检查你的结果。打开 *项目设置(Project Settings)* 并点击 *插件"
"(Plugins)* 选项卡。你的插件应该是唯一一个在名单上。如果它没有显示，请点击 "
"*更新(Update)* 顶部右上角的按钮。"

#: ../../tutorials/making_plugins.rst:238
msgid ""
"At the *Status* column, you can see that the plugin is inactive. So you "
"just need to click on the status to select *Active*. The dock should be "
"immediately visible, even before you close the settings window. And now, "
"lo and behold, you have a custom dock! In just a bit of coding and a "
"simple scene."
msgstr ""
"在 *状态(Status)* 列，您可以看到该插件处于非激活(inactive)状态。你只需要点"
"击 *激活(Active)* 不用关闭设置窗口都能马上看到面板。现在，你瞧，你有一个自"
"定义的面板！只需要一丁点的编码和一个简单的场景。"

#: ../../tutorials/making_plugins.rst:246
msgid "Going beyond"
msgstr "自由创作"

#: ../../tutorials/making_plugins.rst:248
msgid ""
"Now that you learned how to make basic plugins, you can extend the editor "
"in many nice ways. Many functions can be added to editor on the fly with "
"GDScript, it is a powerful way to create special editors without having "
"to delve into C++ modules."
msgstr ""
"现在，您已经了解了如何做基本的插件，您可以通过各式各样的方法扩展编辑器。许"
"多功能用可以用GDScript就可以添加到编辑器上，这是一个来创建一个拥有独特功能"
"的编辑器，但不必深入到c++模块的强大功能。"

#: ../../tutorials/making_plugins.rst:253
msgid ""
"You can make your own plugins to help you and also share them in Godot's "
"Asset Library so many people can benefit of your work."
msgstr ""
"您可以制作您自己的插件然后在Godot的资源库中分享，用您的插件使得大量的开发"
"者受益。"
